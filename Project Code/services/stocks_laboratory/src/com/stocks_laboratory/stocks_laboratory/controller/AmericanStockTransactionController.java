/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.stocks_laboratory.stocks_laboratory.AmericanStockTransaction;
import com.stocks_laboratory.stocks_laboratory.service.AmericanStockTransactionService;


/**
 * Controller object for domain model class AmericanStockTransaction.
 * @see AmericanStockTransaction
 */
@RestController("stocks_laboratory.AmericanStockTransactionController")
@Api(value = "AmericanStockTransactionController", description = "Exposes APIs to work with AmericanStockTransaction resource.")
@RequestMapping("/stocks_laboratory/AmericanStockTransaction")
public class AmericanStockTransactionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AmericanStockTransactionController.class);

    @Autowired
	@Qualifier("stocks_laboratory.AmericanStockTransactionService")
	private AmericanStockTransactionService americanStockTransactionService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AmericanStockTransaction instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AmericanStockTransaction createAmericanStockTransaction(@RequestBody AmericanStockTransaction americanStockTransaction) {
		LOGGER.debug("Create AmericanStockTransaction with information: {}" , americanStockTransaction);

		americanStockTransaction = americanStockTransactionService.create(americanStockTransaction);
		LOGGER.debug("Created AmericanStockTransaction with information: {}" , americanStockTransaction);

	    return americanStockTransaction;
	}

    @ApiOperation(value = "Returns the AmericanStockTransaction instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AmericanStockTransaction getAmericanStockTransaction(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AmericanStockTransaction with id: {}" , id);

        AmericanStockTransaction foundAmericanStockTransaction = americanStockTransactionService.getById(id);
        LOGGER.debug("AmericanStockTransaction details with id: {}" , foundAmericanStockTransaction);

        return foundAmericanStockTransaction;
    }

    @ApiOperation(value = "Updates the AmericanStockTransaction instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AmericanStockTransaction editAmericanStockTransaction(@PathVariable("id") Integer id, @RequestBody AmericanStockTransaction americanStockTransaction) {
        LOGGER.debug("Editing AmericanStockTransaction with id: {}" , americanStockTransaction.getId());

        americanStockTransaction.setId(id);
        americanStockTransaction = americanStockTransactionService.update(americanStockTransaction);
        LOGGER.debug("AmericanStockTransaction details with id: {}" , americanStockTransaction);

        return americanStockTransaction;
    }
    
    @ApiOperation(value = "Partially updates the AmericanStockTransaction instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AmericanStockTransaction patchAmericanStockTransaction(@PathVariable("id") Integer id, @RequestBody @MapTo(AmericanStockTransaction.class) Map<String, Object> americanStockTransactionPatch) {
        LOGGER.debug("Partially updating AmericanStockTransaction with id: {}" , id);

        AmericanStockTransaction americanStockTransaction = americanStockTransactionService.partialUpdate(id, americanStockTransactionPatch);
        LOGGER.debug("AmericanStockTransaction details after partial update: {}" , americanStockTransaction);

        return americanStockTransaction;
    }

    @ApiOperation(value = "Deletes the AmericanStockTransaction instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAmericanStockTransaction(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AmericanStockTransaction with id: {}" , id);

        AmericanStockTransaction deletedAmericanStockTransaction = americanStockTransactionService.delete(id);

        return deletedAmericanStockTransaction != null;
    }

    /**
     * @deprecated Use {@link #findAmericanStockTransactions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AmericanStockTransaction instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AmericanStockTransaction> searchAmericanStockTransactionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AmericanStockTransactions list by query filter:{}", (Object) queryFilters);
        return americanStockTransactionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AmericanStockTransaction instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AmericanStockTransaction> findAmericanStockTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AmericanStockTransactions list by filter:", query);
        return americanStockTransactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AmericanStockTransaction instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AmericanStockTransaction> filterAmericanStockTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AmericanStockTransactions list by filter", query);
        return americanStockTransactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAmericanStockTransactions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return americanStockTransactionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAmericanStockTransactionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AmericanStockTransaction.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> americanStockTransactionService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AmericanStockTransaction instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAmericanStockTransactions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AmericanStockTransactions");
		return americanStockTransactionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAmericanStockTransactionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return americanStockTransactionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AmericanStockTransactionService instance
	 */
	protected void setAmericanStockTransactionService(AmericanStockTransactionService service) {
		this.americanStockTransactionService = service;
	}

}