/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.stocks_laboratory.stocks_laboratory.IndianStockTransaction;
import com.stocks_laboratory.stocks_laboratory.service.IndianStockTransactionService;


/**
 * Controller object for domain model class IndianStockTransaction.
 * @see IndianStockTransaction
 */
@RestController("stocks_laboratory.IndianStockTransactionController")
@Api(value = "IndianStockTransactionController", description = "Exposes APIs to work with IndianStockTransaction resource.")
@RequestMapping("/stocks_laboratory/IndianStockTransaction")
public class IndianStockTransactionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IndianStockTransactionController.class);

    @Autowired
	@Qualifier("stocks_laboratory.IndianStockTransactionService")
	private IndianStockTransactionService indianStockTransactionService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new IndianStockTransaction instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IndianStockTransaction createIndianStockTransaction(@RequestBody IndianStockTransaction indianStockTransaction) {
		LOGGER.debug("Create IndianStockTransaction with information: {}" , indianStockTransaction);

		indianStockTransaction = indianStockTransactionService.create(indianStockTransaction);
		LOGGER.debug("Created IndianStockTransaction with information: {}" , indianStockTransaction);

	    return indianStockTransaction;
	}

    @ApiOperation(value = "Returns the IndianStockTransaction instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IndianStockTransaction getIndianStockTransaction(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting IndianStockTransaction with id: {}" , id);

        IndianStockTransaction foundIndianStockTransaction = indianStockTransactionService.getById(id);
        LOGGER.debug("IndianStockTransaction details with id: {}" , foundIndianStockTransaction);

        return foundIndianStockTransaction;
    }

    @ApiOperation(value = "Updates the IndianStockTransaction instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IndianStockTransaction editIndianStockTransaction(@PathVariable("id") Integer id, @RequestBody IndianStockTransaction indianStockTransaction) {
        LOGGER.debug("Editing IndianStockTransaction with id: {}" , indianStockTransaction.getId());

        indianStockTransaction.setId(id);
        indianStockTransaction = indianStockTransactionService.update(indianStockTransaction);
        LOGGER.debug("IndianStockTransaction details with id: {}" , indianStockTransaction);

        return indianStockTransaction;
    }
    
    @ApiOperation(value = "Partially updates the IndianStockTransaction instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public IndianStockTransaction patchIndianStockTransaction(@PathVariable("id") Integer id, @RequestBody @MapTo(IndianStockTransaction.class) Map<String, Object> indianStockTransactionPatch) {
        LOGGER.debug("Partially updating IndianStockTransaction with id: {}" , id);

        IndianStockTransaction indianStockTransaction = indianStockTransactionService.partialUpdate(id, indianStockTransactionPatch);
        LOGGER.debug("IndianStockTransaction details after partial update: {}" , indianStockTransaction);

        return indianStockTransaction;
    }

    @ApiOperation(value = "Deletes the IndianStockTransaction instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteIndianStockTransaction(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting IndianStockTransaction with id: {}" , id);

        IndianStockTransaction deletedIndianStockTransaction = indianStockTransactionService.delete(id);

        return deletedIndianStockTransaction != null;
    }

    /**
     * @deprecated Use {@link #findIndianStockTransactions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of IndianStockTransaction instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IndianStockTransaction> searchIndianStockTransactionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering IndianStockTransactions list by query filter:{}", (Object) queryFilters);
        return indianStockTransactionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of IndianStockTransaction instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IndianStockTransaction> findIndianStockTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering IndianStockTransactions list by filter:", query);
        return indianStockTransactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of IndianStockTransaction instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<IndianStockTransaction> filterIndianStockTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering IndianStockTransactions list by filter", query);
        return indianStockTransactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportIndianStockTransactions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return indianStockTransactionService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportIndianStockTransactionsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = IndianStockTransaction.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> indianStockTransactionService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of IndianStockTransaction instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countIndianStockTransactions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting IndianStockTransactions");
		return indianStockTransactionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getIndianStockTransactionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return indianStockTransactionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service IndianStockTransactionService instance
	 */
	protected void setIndianStockTransactionService(IndianStockTransactionService service) {
		this.indianStockTransactionService = service;
	}

}