/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.stocks_laboratory.stocks_laboratory.StockWatchlist;
import com.stocks_laboratory.stocks_laboratory.service.StockWatchlistService;


/**
 * Controller object for domain model class StockWatchlist.
 * @see StockWatchlist
 */
@RestController("stocks_laboratory.StockWatchlistController")
@Api(value = "StockWatchlistController", description = "Exposes APIs to work with StockWatchlist resource.")
@RequestMapping("/stocks_laboratory/StockWatchlist")
public class StockWatchlistController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StockWatchlistController.class);

    @Autowired
	@Qualifier("stocks_laboratory.StockWatchlistService")
	private StockWatchlistService stockWatchlistService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new StockWatchlist instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StockWatchlist createStockWatchlist(@RequestBody StockWatchlist stockWatchlist) {
		LOGGER.debug("Create StockWatchlist with information: {}" , stockWatchlist);

		stockWatchlist = stockWatchlistService.create(stockWatchlist);
		LOGGER.debug("Created StockWatchlist with information: {}" , stockWatchlist);

	    return stockWatchlist;
	}

    @ApiOperation(value = "Returns the StockWatchlist instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StockWatchlist getStockWatchlist(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting StockWatchlist with id: {}" , id);

        StockWatchlist foundStockWatchlist = stockWatchlistService.getById(id);
        LOGGER.debug("StockWatchlist details with id: {}" , foundStockWatchlist);

        return foundStockWatchlist;
    }

    @ApiOperation(value = "Updates the StockWatchlist instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StockWatchlist editStockWatchlist(@PathVariable("id") Integer id, @RequestBody StockWatchlist stockWatchlist) {
        LOGGER.debug("Editing StockWatchlist with id: {}" , stockWatchlist.getId());

        stockWatchlist.setId(id);
        stockWatchlist = stockWatchlistService.update(stockWatchlist);
        LOGGER.debug("StockWatchlist details with id: {}" , stockWatchlist);

        return stockWatchlist;
    }
    
    @ApiOperation(value = "Partially updates the StockWatchlist instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StockWatchlist patchStockWatchlist(@PathVariable("id") Integer id, @RequestBody @MapTo(StockWatchlist.class) Map<String, Object> stockWatchlistPatch) {
        LOGGER.debug("Partially updating StockWatchlist with id: {}" , id);

        StockWatchlist stockWatchlist = stockWatchlistService.partialUpdate(id, stockWatchlistPatch);
        LOGGER.debug("StockWatchlist details after partial update: {}" , stockWatchlist);

        return stockWatchlist;
    }

    @ApiOperation(value = "Deletes the StockWatchlist instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStockWatchlist(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting StockWatchlist with id: {}" , id);

        StockWatchlist deletedStockWatchlist = stockWatchlistService.delete(id);

        return deletedStockWatchlist != null;
    }

    @GetMapping(value = "/symbol-createdBy" )
    @ApiOperation(value = "Returns the matching StockWatchlist with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StockWatchlist getBySymbolAndCreatedBy(@RequestParam("symbol") String symbol, @RequestParam("createdBy") Integer createdBy) {
        LOGGER.debug("Getting StockWatchlist with uniques key SymbolAndCreatedBy");
        return stockWatchlistService.getBySymbolAndCreatedBy(symbol, createdBy);
    }

    /**
     * @deprecated Use {@link #findStockWatchlists(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of StockWatchlist instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StockWatchlist> searchStockWatchlistsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StockWatchlists list by query filter:{}", (Object) queryFilters);
        return stockWatchlistService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of StockWatchlist instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StockWatchlist> findStockWatchlists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering StockWatchlists list by filter:", query);
        return stockWatchlistService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of StockWatchlist instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StockWatchlist> filterStockWatchlists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering StockWatchlists list by filter", query);
        return stockWatchlistService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStockWatchlists(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return stockWatchlistService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportStockWatchlistsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = StockWatchlist.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> stockWatchlistService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of StockWatchlist instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countStockWatchlists( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting StockWatchlists");
		return stockWatchlistService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getStockWatchlistAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return stockWatchlistService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StockWatchlistService instance
	 */
	protected void setStockWatchlistService(StockWatchlistService service) {
		this.stockWatchlistService = service;
	}

}