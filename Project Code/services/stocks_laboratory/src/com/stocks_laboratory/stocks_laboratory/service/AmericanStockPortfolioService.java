/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.AmericanStockPortfolio;

/**
 * Service object for domain model class {@link AmericanStockPortfolio}.
 */
public interface AmericanStockPortfolioService {

    /**
     * Creates a new AmericanStockPortfolio. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AmericanStockPortfolio if any.
     *
     * @param americanStockPortfolio Details of the AmericanStockPortfolio to be created; value cannot be null.
     * @return The newly created AmericanStockPortfolio.
     */
    AmericanStockPortfolio create(@Valid AmericanStockPortfolio americanStockPortfolio);


	/**
     * Returns AmericanStockPortfolio by given id if exists.
     *
     * @param americanstockportfolioId The id of the AmericanStockPortfolio to get; value cannot be null.
     * @return AmericanStockPortfolio associated with the given americanstockportfolioId.
	 * @throws EntityNotFoundException If no AmericanStockPortfolio is found.
     */
    AmericanStockPortfolio getById(Integer americanstockportfolioId);

    /**
     * Find and return the AmericanStockPortfolio by given id if exists, returns null otherwise.
     *
     * @param americanstockportfolioId The id of the AmericanStockPortfolio to get; value cannot be null.
     * @return AmericanStockPortfolio associated with the given americanstockportfolioId.
     */
    AmericanStockPortfolio findById(Integer americanstockportfolioId);

	/**
     * Find and return the list of AmericanStockPortfolios by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param americanstockportfolioIds The id's of the AmericanStockPortfolio to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AmericanStockPortfolios associated with the given americanstockportfolioIds.
     */
    List<AmericanStockPortfolio> findByMultipleIds(List<Integer> americanstockportfolioIds, boolean orderedReturn);

    /**
     * Find and return the AmericanStockPortfolio for given userId  andstockSymbol  if exists.
     *
     * @param userId value of userId; value cannot be null.
     * @param stockSymbol value of stockSymbol; value cannot be null.
     * @return AmericanStockPortfolio associated with the given inputs.
     * @throws EntityNotFoundException if no matching AmericanStockPortfolio found.
     */
    AmericanStockPortfolio getByUserIdAndStockSymbol(int userId, String stockSymbol);

    /**
     * Updates the details of an existing AmericanStockPortfolio. It replaces all fields of the existing AmericanStockPortfolio with the given americanStockPortfolio.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AmericanStockPortfolio if any.
     *
     * @param americanStockPortfolio The details of the AmericanStockPortfolio to be updated; value cannot be null.
     * @return The updated AmericanStockPortfolio.
     * @throws EntityNotFoundException if no AmericanStockPortfolio is found with given input.
     */
    AmericanStockPortfolio update(@Valid AmericanStockPortfolio americanStockPortfolio);


    /**
     * Partially updates the details of an existing AmericanStockPortfolio. It updates only the
     * fields of the existing AmericanStockPortfolio which are passed in the americanStockPortfolioPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AmericanStockPortfolio if any.
     *
     * @param americanstockportfolioId The id of the AmericanStockPortfolio to be deleted; value cannot be null.
     * @param americanStockPortfolioPatch The partial data of AmericanStockPortfolio which is supposed to be updated; value cannot be null.
     * @return The updated AmericanStockPortfolio.
     * @throws EntityNotFoundException if no AmericanStockPortfolio is found with given input.
     */
    AmericanStockPortfolio partialUpdate(Integer americanstockportfolioId, Map<String, Object> americanStockPortfolioPatch);

    /**
     * Deletes an existing AmericanStockPortfolio with the given id.
     *
     * @param americanstockportfolioId The id of the AmericanStockPortfolio to be deleted; value cannot be null.
     * @return The deleted AmericanStockPortfolio.
     * @throws EntityNotFoundException if no AmericanStockPortfolio found with the given id.
     */
    AmericanStockPortfolio delete(Integer americanstockportfolioId);

    /**
     * Deletes an existing AmericanStockPortfolio with the given object.
     *
     * @param americanStockPortfolio The instance of the AmericanStockPortfolio to be deleted; value cannot be null.
     */
    void delete(AmericanStockPortfolio americanStockPortfolio);

    /**
     * Find all AmericanStockPortfolios matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AmericanStockPortfolios.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AmericanStockPortfolio> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AmericanStockPortfolios matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AmericanStockPortfolios.
     *
     * @see Pageable
     * @see Page
     */
    Page<AmericanStockPortfolio> findAll(String query, Pageable pageable);

    /**
     * Exports all AmericanStockPortfolios matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AmericanStockPortfolios matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AmericanStockPortfolios in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AmericanStockPortfolio.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}