/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.AmericanStockPortfolio;


/**
 * ServiceImpl object for domain model class AmericanStockPortfolio.
 *
 * @see AmericanStockPortfolio
 */
@Service("stocks_laboratory.AmericanStockPortfolioService")
@Validated
@EntityService(entityClass = AmericanStockPortfolio.class, serviceId = "stocks_laboratory")
public class AmericanStockPortfolioServiceImpl implements AmericanStockPortfolioService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AmericanStockPortfolioServiceImpl.class);


    @Autowired
    @Qualifier("stocks_laboratory.AmericanStockPortfolioDao")
    private WMGenericDao<AmericanStockPortfolio, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AmericanStockPortfolio, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockPortfolio create(AmericanStockPortfolio americanStockPortfolio) {
        LOGGER.debug("Creating a new AmericanStockPortfolio with information: {}", americanStockPortfolio);

        AmericanStockPortfolio americanStockPortfolioCreated = this.wmGenericDao.create(americanStockPortfolio);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(americanStockPortfolioCreated);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockPortfolio getById(Integer americanstockportfolioId) {
        LOGGER.debug("Finding AmericanStockPortfolio by id: {}", americanstockportfolioId);
        return this.wmGenericDao.findById(americanstockportfolioId);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockPortfolio findById(Integer americanstockportfolioId) {
        LOGGER.debug("Finding AmericanStockPortfolio by id: {}", americanstockportfolioId);
        try {
            return this.wmGenericDao.findById(americanstockportfolioId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AmericanStockPortfolio found with id: {}", americanstockportfolioId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public List<AmericanStockPortfolio> findByMultipleIds(List<Integer> americanstockportfolioIds, boolean orderedReturn) {
        LOGGER.debug("Finding AmericanStockPortfolios by ids: {}", americanstockportfolioIds);

        return this.wmGenericDao.findByMultipleIds(americanstockportfolioIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockPortfolio getByUserIdAndStockSymbol(int userId, String stockSymbol) {
        Map<String, Object> userIdAndStockSymbolMap = new HashMap<>();
        userIdAndStockSymbolMap.put("userId", userId);
        userIdAndStockSymbolMap.put("stockSymbol", stockSymbol);

        LOGGER.debug("Finding AmericanStockPortfolio by unique keys: {}", userIdAndStockSymbolMap);
        return this.wmGenericDao.findByUniqueKey(userIdAndStockSymbolMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockPortfolio update(AmericanStockPortfolio americanStockPortfolio) {
        LOGGER.debug("Updating AmericanStockPortfolio with information: {}", americanStockPortfolio);

        this.wmGenericDao.update(americanStockPortfolio);
        this.wmGenericDao.refresh(americanStockPortfolio);

        return americanStockPortfolio;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockPortfolio partialUpdate(Integer americanstockportfolioId, Map<String, Object>americanStockPortfolioPatch) {
        LOGGER.debug("Partially Updating the AmericanStockPortfolio with id: {}", americanstockportfolioId);

        AmericanStockPortfolio americanStockPortfolio = getById(americanstockportfolioId);

        try {
            ObjectReader americanStockPortfolioReader = this.objectMapper.reader().forType(AmericanStockPortfolio.class).withValueToUpdate(americanStockPortfolio);
            americanStockPortfolio = americanStockPortfolioReader.readValue(this.objectMapper.writeValueAsString(americanStockPortfolioPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", americanStockPortfolioPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        americanStockPortfolio = update(americanStockPortfolio);

        return americanStockPortfolio;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockPortfolio delete(Integer americanstockportfolioId) {
        LOGGER.debug("Deleting AmericanStockPortfolio with id: {}", americanstockportfolioId);
        AmericanStockPortfolio deleted = this.wmGenericDao.findById(americanstockportfolioId);
        if (deleted == null) {
            LOGGER.debug("No AmericanStockPortfolio found with id: {}", americanstockportfolioId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AmericanStockPortfolio.class.getSimpleName(), americanstockportfolioId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public void delete(AmericanStockPortfolio americanStockPortfolio) {
        LOGGER.debug("Deleting AmericanStockPortfolio with {}", americanStockPortfolio);
        this.wmGenericDao.delete(americanStockPortfolio);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<AmericanStockPortfolio> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AmericanStockPortfolios");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<AmericanStockPortfolio> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AmericanStockPortfolios");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table AmericanStockPortfolio to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table AmericanStockPortfolio to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}