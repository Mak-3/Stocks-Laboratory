/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.AmericanStockTransaction;

/**
 * Service object for domain model class {@link AmericanStockTransaction}.
 */
public interface AmericanStockTransactionService {

    /**
     * Creates a new AmericanStockTransaction. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AmericanStockTransaction if any.
     *
     * @param americanStockTransaction Details of the AmericanStockTransaction to be created; value cannot be null.
     * @return The newly created AmericanStockTransaction.
     */
    AmericanStockTransaction create(@Valid AmericanStockTransaction americanStockTransaction);


	/**
     * Returns AmericanStockTransaction by given id if exists.
     *
     * @param americanstocktransactionId The id of the AmericanStockTransaction to get; value cannot be null.
     * @return AmericanStockTransaction associated with the given americanstocktransactionId.
	 * @throws EntityNotFoundException If no AmericanStockTransaction is found.
     */
    AmericanStockTransaction getById(Integer americanstocktransactionId);

    /**
     * Find and return the AmericanStockTransaction by given id if exists, returns null otherwise.
     *
     * @param americanstocktransactionId The id of the AmericanStockTransaction to get; value cannot be null.
     * @return AmericanStockTransaction associated with the given americanstocktransactionId.
     */
    AmericanStockTransaction findById(Integer americanstocktransactionId);

	/**
     * Find and return the list of AmericanStockTransactions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param americanstocktransactionIds The id's of the AmericanStockTransaction to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AmericanStockTransactions associated with the given americanstocktransactionIds.
     */
    List<AmericanStockTransaction> findByMultipleIds(List<Integer> americanstocktransactionIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AmericanStockTransaction. It replaces all fields of the existing AmericanStockTransaction with the given americanStockTransaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AmericanStockTransaction if any.
     *
     * @param americanStockTransaction The details of the AmericanStockTransaction to be updated; value cannot be null.
     * @return The updated AmericanStockTransaction.
     * @throws EntityNotFoundException if no AmericanStockTransaction is found with given input.
     */
    AmericanStockTransaction update(@Valid AmericanStockTransaction americanStockTransaction);


    /**
     * Partially updates the details of an existing AmericanStockTransaction. It updates only the
     * fields of the existing AmericanStockTransaction which are passed in the americanStockTransactionPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AmericanStockTransaction if any.
     *
     * @param americanstocktransactionId The id of the AmericanStockTransaction to be deleted; value cannot be null.
     * @param americanStockTransactionPatch The partial data of AmericanStockTransaction which is supposed to be updated; value cannot be null.
     * @return The updated AmericanStockTransaction.
     * @throws EntityNotFoundException if no AmericanStockTransaction is found with given input.
     */
    AmericanStockTransaction partialUpdate(Integer americanstocktransactionId, Map<String, Object> americanStockTransactionPatch);

    /**
     * Deletes an existing AmericanStockTransaction with the given id.
     *
     * @param americanstocktransactionId The id of the AmericanStockTransaction to be deleted; value cannot be null.
     * @return The deleted AmericanStockTransaction.
     * @throws EntityNotFoundException if no AmericanStockTransaction found with the given id.
     */
    AmericanStockTransaction delete(Integer americanstocktransactionId);

    /**
     * Deletes an existing AmericanStockTransaction with the given object.
     *
     * @param americanStockTransaction The instance of the AmericanStockTransaction to be deleted; value cannot be null.
     */
    void delete(AmericanStockTransaction americanStockTransaction);

    /**
     * Find all AmericanStockTransactions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AmericanStockTransactions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AmericanStockTransaction> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AmericanStockTransactions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AmericanStockTransactions.
     *
     * @see Pageable
     * @see Page
     */
    Page<AmericanStockTransaction> findAll(String query, Pageable pageable);

    /**
     * Exports all AmericanStockTransactions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AmericanStockTransactions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AmericanStockTransactions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AmericanStockTransaction.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}