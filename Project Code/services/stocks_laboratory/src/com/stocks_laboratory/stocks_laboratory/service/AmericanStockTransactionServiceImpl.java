/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.AmericanStockTransaction;


/**
 * ServiceImpl object for domain model class AmericanStockTransaction.
 *
 * @see AmericanStockTransaction
 */
@Service("stocks_laboratory.AmericanStockTransactionService")
@Validated
@EntityService(entityClass = AmericanStockTransaction.class, serviceId = "stocks_laboratory")
public class AmericanStockTransactionServiceImpl implements AmericanStockTransactionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AmericanStockTransactionServiceImpl.class);


    @Autowired
    @Qualifier("stocks_laboratory.AmericanStockTransactionDao")
    private WMGenericDao<AmericanStockTransaction, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AmericanStockTransaction, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockTransaction create(AmericanStockTransaction americanStockTransaction) {
        LOGGER.debug("Creating a new AmericanStockTransaction with information: {}", americanStockTransaction);

        AmericanStockTransaction americanStockTransactionCreated = this.wmGenericDao.create(americanStockTransaction);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(americanStockTransactionCreated);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockTransaction getById(Integer americanstocktransactionId) {
        LOGGER.debug("Finding AmericanStockTransaction by id: {}", americanstocktransactionId);
        return this.wmGenericDao.findById(americanstocktransactionId);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockTransaction findById(Integer americanstocktransactionId) {
        LOGGER.debug("Finding AmericanStockTransaction by id: {}", americanstocktransactionId);
        try {
            return this.wmGenericDao.findById(americanstocktransactionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AmericanStockTransaction found with id: {}", americanstocktransactionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public List<AmericanStockTransaction> findByMultipleIds(List<Integer> americanstocktransactionIds, boolean orderedReturn) {
        LOGGER.debug("Finding AmericanStockTransactions by ids: {}", americanstocktransactionIds);

        return this.wmGenericDao.findByMultipleIds(americanstocktransactionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockTransaction update(AmericanStockTransaction americanStockTransaction) {
        LOGGER.debug("Updating AmericanStockTransaction with information: {}", americanStockTransaction);

        this.wmGenericDao.update(americanStockTransaction);
        this.wmGenericDao.refresh(americanStockTransaction);

        return americanStockTransaction;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockTransaction partialUpdate(Integer americanstocktransactionId, Map<String, Object>americanStockTransactionPatch) {
        LOGGER.debug("Partially Updating the AmericanStockTransaction with id: {}", americanstocktransactionId);

        AmericanStockTransaction americanStockTransaction = getById(americanstocktransactionId);

        try {
            ObjectReader americanStockTransactionReader = this.objectMapper.reader().forType(AmericanStockTransaction.class).withValueToUpdate(americanStockTransaction);
            americanStockTransaction = americanStockTransactionReader.readValue(this.objectMapper.writeValueAsString(americanStockTransactionPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", americanStockTransactionPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        americanStockTransaction = update(americanStockTransaction);

        return americanStockTransaction;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public AmericanStockTransaction delete(Integer americanstocktransactionId) {
        LOGGER.debug("Deleting AmericanStockTransaction with id: {}", americanstocktransactionId);
        AmericanStockTransaction deleted = this.wmGenericDao.findById(americanstocktransactionId);
        if (deleted == null) {
            LOGGER.debug("No AmericanStockTransaction found with id: {}", americanstocktransactionId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AmericanStockTransaction.class.getSimpleName(), americanstocktransactionId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public void delete(AmericanStockTransaction americanStockTransaction) {
        LOGGER.debug("Deleting AmericanStockTransaction with {}", americanStockTransaction);
        this.wmGenericDao.delete(americanStockTransaction);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<AmericanStockTransaction> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AmericanStockTransactions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<AmericanStockTransaction> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AmericanStockTransactions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table AmericanStockTransaction to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table AmericanStockTransaction to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}