/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.IndianStockPortfolio;

/**
 * Service object for domain model class {@link IndianStockPortfolio}.
 */
public interface IndianStockPortfolioService {

    /**
     * Creates a new IndianStockPortfolio. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IndianStockPortfolio if any.
     *
     * @param indianStockPortfolio Details of the IndianStockPortfolio to be created; value cannot be null.
     * @return The newly created IndianStockPortfolio.
     */
    IndianStockPortfolio create(@Valid IndianStockPortfolio indianStockPortfolio);


	/**
     * Returns IndianStockPortfolio by given id if exists.
     *
     * @param indianstockportfolioId The id of the IndianStockPortfolio to get; value cannot be null.
     * @return IndianStockPortfolio associated with the given indianstockportfolioId.
	 * @throws EntityNotFoundException If no IndianStockPortfolio is found.
     */
    IndianStockPortfolio getById(Integer indianstockportfolioId);

    /**
     * Find and return the IndianStockPortfolio by given id if exists, returns null otherwise.
     *
     * @param indianstockportfolioId The id of the IndianStockPortfolio to get; value cannot be null.
     * @return IndianStockPortfolio associated with the given indianstockportfolioId.
     */
    IndianStockPortfolio findById(Integer indianstockportfolioId);

	/**
     * Find and return the list of IndianStockPortfolios by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param indianstockportfolioIds The id's of the IndianStockPortfolio to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return IndianStockPortfolios associated with the given indianstockportfolioIds.
     */
    List<IndianStockPortfolio> findByMultipleIds(List<Integer> indianstockportfolioIds, boolean orderedReturn);

    /**
     * Find and return the IndianStockPortfolio for given userId  andstockSymbol  if exists.
     *
     * @param userId value of userId; value cannot be null.
     * @param stockSymbol value of stockSymbol; value cannot be null.
     * @return IndianStockPortfolio associated with the given inputs.
     * @throws EntityNotFoundException if no matching IndianStockPortfolio found.
     */
    IndianStockPortfolio getByUserIdAndStockSymbol(int userId, String stockSymbol);

    /**
     * Updates the details of an existing IndianStockPortfolio. It replaces all fields of the existing IndianStockPortfolio with the given indianStockPortfolio.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IndianStockPortfolio if any.
     *
     * @param indianStockPortfolio The details of the IndianStockPortfolio to be updated; value cannot be null.
     * @return The updated IndianStockPortfolio.
     * @throws EntityNotFoundException if no IndianStockPortfolio is found with given input.
     */
    IndianStockPortfolio update(@Valid IndianStockPortfolio indianStockPortfolio);


    /**
     * Partially updates the details of an existing IndianStockPortfolio. It updates only the
     * fields of the existing IndianStockPortfolio which are passed in the indianStockPortfolioPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IndianStockPortfolio if any.
     *
     * @param indianstockportfolioId The id of the IndianStockPortfolio to be deleted; value cannot be null.
     * @param indianStockPortfolioPatch The partial data of IndianStockPortfolio which is supposed to be updated; value cannot be null.
     * @return The updated IndianStockPortfolio.
     * @throws EntityNotFoundException if no IndianStockPortfolio is found with given input.
     */
    IndianStockPortfolio partialUpdate(Integer indianstockportfolioId, Map<String, Object> indianStockPortfolioPatch);

    /**
     * Deletes an existing IndianStockPortfolio with the given id.
     *
     * @param indianstockportfolioId The id of the IndianStockPortfolio to be deleted; value cannot be null.
     * @return The deleted IndianStockPortfolio.
     * @throws EntityNotFoundException if no IndianStockPortfolio found with the given id.
     */
    IndianStockPortfolio delete(Integer indianstockportfolioId);

    /**
     * Deletes an existing IndianStockPortfolio with the given object.
     *
     * @param indianStockPortfolio The instance of the IndianStockPortfolio to be deleted; value cannot be null.
     */
    void delete(IndianStockPortfolio indianStockPortfolio);

    /**
     * Find all IndianStockPortfolios matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IndianStockPortfolios.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<IndianStockPortfolio> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all IndianStockPortfolios matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IndianStockPortfolios.
     *
     * @see Pageable
     * @see Page
     */
    Page<IndianStockPortfolio> findAll(String query, Pageable pageable);

    /**
     * Exports all IndianStockPortfolios matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all IndianStockPortfolios matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the IndianStockPortfolios in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the IndianStockPortfolio.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}