/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.IndianStockPortfolio;


/**
 * ServiceImpl object for domain model class IndianStockPortfolio.
 *
 * @see IndianStockPortfolio
 */
@Service("stocks_laboratory.IndianStockPortfolioService")
@Validated
@EntityService(entityClass = IndianStockPortfolio.class, serviceId = "stocks_laboratory")
public class IndianStockPortfolioServiceImpl implements IndianStockPortfolioService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IndianStockPortfolioServiceImpl.class);


    @Autowired
    @Qualifier("stocks_laboratory.IndianStockPortfolioDao")
    private WMGenericDao<IndianStockPortfolio, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<IndianStockPortfolio, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockPortfolio create(IndianStockPortfolio indianStockPortfolio) {
        LOGGER.debug("Creating a new IndianStockPortfolio with information: {}", indianStockPortfolio);

        IndianStockPortfolio indianStockPortfolioCreated = this.wmGenericDao.create(indianStockPortfolio);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(indianStockPortfolioCreated);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockPortfolio getById(Integer indianstockportfolioId) {
        LOGGER.debug("Finding IndianStockPortfolio by id: {}", indianstockportfolioId);
        return this.wmGenericDao.findById(indianstockportfolioId);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockPortfolio findById(Integer indianstockportfolioId) {
        LOGGER.debug("Finding IndianStockPortfolio by id: {}", indianstockportfolioId);
        try {
            return this.wmGenericDao.findById(indianstockportfolioId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No IndianStockPortfolio found with id: {}", indianstockportfolioId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public List<IndianStockPortfolio> findByMultipleIds(List<Integer> indianstockportfolioIds, boolean orderedReturn) {
        LOGGER.debug("Finding IndianStockPortfolios by ids: {}", indianstockportfolioIds);

        return this.wmGenericDao.findByMultipleIds(indianstockportfolioIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockPortfolio getByUserIdAndStockSymbol(int userId, String stockSymbol) {
        Map<String, Object> userIdAndStockSymbolMap = new HashMap<>();
        userIdAndStockSymbolMap.put("userId", userId);
        userIdAndStockSymbolMap.put("stockSymbol", stockSymbol);

        LOGGER.debug("Finding IndianStockPortfolio by unique keys: {}", userIdAndStockSymbolMap);
        return this.wmGenericDao.findByUniqueKey(userIdAndStockSymbolMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockPortfolio update(IndianStockPortfolio indianStockPortfolio) {
        LOGGER.debug("Updating IndianStockPortfolio with information: {}", indianStockPortfolio);

        this.wmGenericDao.update(indianStockPortfolio);
        this.wmGenericDao.refresh(indianStockPortfolio);

        return indianStockPortfolio;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockPortfolio partialUpdate(Integer indianstockportfolioId, Map<String, Object>indianStockPortfolioPatch) {
        LOGGER.debug("Partially Updating the IndianStockPortfolio with id: {}", indianstockportfolioId);

        IndianStockPortfolio indianStockPortfolio = getById(indianstockportfolioId);

        try {
            ObjectReader indianStockPortfolioReader = this.objectMapper.reader().forType(IndianStockPortfolio.class).withValueToUpdate(indianStockPortfolio);
            indianStockPortfolio = indianStockPortfolioReader.readValue(this.objectMapper.writeValueAsString(indianStockPortfolioPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", indianStockPortfolioPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        indianStockPortfolio = update(indianStockPortfolio);

        return indianStockPortfolio;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockPortfolio delete(Integer indianstockportfolioId) {
        LOGGER.debug("Deleting IndianStockPortfolio with id: {}", indianstockportfolioId);
        IndianStockPortfolio deleted = this.wmGenericDao.findById(indianstockportfolioId);
        if (deleted == null) {
            LOGGER.debug("No IndianStockPortfolio found with id: {}", indianstockportfolioId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), IndianStockPortfolio.class.getSimpleName(), indianstockportfolioId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public void delete(IndianStockPortfolio indianStockPortfolio) {
        LOGGER.debug("Deleting IndianStockPortfolio with {}", indianStockPortfolio);
        this.wmGenericDao.delete(indianStockPortfolio);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<IndianStockPortfolio> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IndianStockPortfolios");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<IndianStockPortfolio> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IndianStockPortfolios");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table IndianStockPortfolio to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table IndianStockPortfolio to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}