/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.IndianStockTransaction;

/**
 * Service object for domain model class {@link IndianStockTransaction}.
 */
public interface IndianStockTransactionService {

    /**
     * Creates a new IndianStockTransaction. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IndianStockTransaction if any.
     *
     * @param indianStockTransaction Details of the IndianStockTransaction to be created; value cannot be null.
     * @return The newly created IndianStockTransaction.
     */
    IndianStockTransaction create(@Valid IndianStockTransaction indianStockTransaction);


	/**
     * Returns IndianStockTransaction by given id if exists.
     *
     * @param indianstocktransactionId The id of the IndianStockTransaction to get; value cannot be null.
     * @return IndianStockTransaction associated with the given indianstocktransactionId.
	 * @throws EntityNotFoundException If no IndianStockTransaction is found.
     */
    IndianStockTransaction getById(Integer indianstocktransactionId);

    /**
     * Find and return the IndianStockTransaction by given id if exists, returns null otherwise.
     *
     * @param indianstocktransactionId The id of the IndianStockTransaction to get; value cannot be null.
     * @return IndianStockTransaction associated with the given indianstocktransactionId.
     */
    IndianStockTransaction findById(Integer indianstocktransactionId);

	/**
     * Find and return the list of IndianStockTransactions by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param indianstocktransactionIds The id's of the IndianStockTransaction to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return IndianStockTransactions associated with the given indianstocktransactionIds.
     */
    List<IndianStockTransaction> findByMultipleIds(List<Integer> indianstocktransactionIds, boolean orderedReturn);


    /**
     * Updates the details of an existing IndianStockTransaction. It replaces all fields of the existing IndianStockTransaction with the given indianStockTransaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IndianStockTransaction if any.
     *
     * @param indianStockTransaction The details of the IndianStockTransaction to be updated; value cannot be null.
     * @return The updated IndianStockTransaction.
     * @throws EntityNotFoundException if no IndianStockTransaction is found with given input.
     */
    IndianStockTransaction update(@Valid IndianStockTransaction indianStockTransaction);


    /**
     * Partially updates the details of an existing IndianStockTransaction. It updates only the
     * fields of the existing IndianStockTransaction which are passed in the indianStockTransactionPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on IndianStockTransaction if any.
     *
     * @param indianstocktransactionId The id of the IndianStockTransaction to be deleted; value cannot be null.
     * @param indianStockTransactionPatch The partial data of IndianStockTransaction which is supposed to be updated; value cannot be null.
     * @return The updated IndianStockTransaction.
     * @throws EntityNotFoundException if no IndianStockTransaction is found with given input.
     */
    IndianStockTransaction partialUpdate(Integer indianstocktransactionId, Map<String, Object> indianStockTransactionPatch);

    /**
     * Deletes an existing IndianStockTransaction with the given id.
     *
     * @param indianstocktransactionId The id of the IndianStockTransaction to be deleted; value cannot be null.
     * @return The deleted IndianStockTransaction.
     * @throws EntityNotFoundException if no IndianStockTransaction found with the given id.
     */
    IndianStockTransaction delete(Integer indianstocktransactionId);

    /**
     * Deletes an existing IndianStockTransaction with the given object.
     *
     * @param indianStockTransaction The instance of the IndianStockTransaction to be deleted; value cannot be null.
     */
    void delete(IndianStockTransaction indianStockTransaction);

    /**
     * Find all IndianStockTransactions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IndianStockTransactions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<IndianStockTransaction> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all IndianStockTransactions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching IndianStockTransactions.
     *
     * @see Pageable
     * @see Page
     */
    Page<IndianStockTransaction> findAll(String query, Pageable pageable);

    /**
     * Exports all IndianStockTransactions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all IndianStockTransactions matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the IndianStockTransactions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the IndianStockTransaction.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}