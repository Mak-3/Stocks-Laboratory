/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.IndianStockTransaction;


/**
 * ServiceImpl object for domain model class IndianStockTransaction.
 *
 * @see IndianStockTransaction
 */
@Service("stocks_laboratory.IndianStockTransactionService")
@Validated
@EntityService(entityClass = IndianStockTransaction.class, serviceId = "stocks_laboratory")
public class IndianStockTransactionServiceImpl implements IndianStockTransactionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(IndianStockTransactionServiceImpl.class);


    @Autowired
    @Qualifier("stocks_laboratory.IndianStockTransactionDao")
    private WMGenericDao<IndianStockTransaction, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<IndianStockTransaction, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockTransaction create(IndianStockTransaction indianStockTransaction) {
        LOGGER.debug("Creating a new IndianStockTransaction with information: {}", indianStockTransaction);

        IndianStockTransaction indianStockTransactionCreated = this.wmGenericDao.create(indianStockTransaction);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(indianStockTransactionCreated);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockTransaction getById(Integer indianstocktransactionId) {
        LOGGER.debug("Finding IndianStockTransaction by id: {}", indianstocktransactionId);
        return this.wmGenericDao.findById(indianstocktransactionId);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockTransaction findById(Integer indianstocktransactionId) {
        LOGGER.debug("Finding IndianStockTransaction by id: {}", indianstocktransactionId);
        try {
            return this.wmGenericDao.findById(indianstocktransactionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No IndianStockTransaction found with id: {}", indianstocktransactionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public List<IndianStockTransaction> findByMultipleIds(List<Integer> indianstocktransactionIds, boolean orderedReturn) {
        LOGGER.debug("Finding IndianStockTransactions by ids: {}", indianstocktransactionIds);

        return this.wmGenericDao.findByMultipleIds(indianstocktransactionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockTransaction update(IndianStockTransaction indianStockTransaction) {
        LOGGER.debug("Updating IndianStockTransaction with information: {}", indianStockTransaction);

        this.wmGenericDao.update(indianStockTransaction);
        this.wmGenericDao.refresh(indianStockTransaction);

        return indianStockTransaction;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockTransaction partialUpdate(Integer indianstocktransactionId, Map<String, Object>indianStockTransactionPatch) {
        LOGGER.debug("Partially Updating the IndianStockTransaction with id: {}", indianstocktransactionId);

        IndianStockTransaction indianStockTransaction = getById(indianstocktransactionId);

        try {
            ObjectReader indianStockTransactionReader = this.objectMapper.reader().forType(IndianStockTransaction.class).withValueToUpdate(indianStockTransaction);
            indianStockTransaction = indianStockTransactionReader.readValue(this.objectMapper.writeValueAsString(indianStockTransactionPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", indianStockTransactionPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        indianStockTransaction = update(indianStockTransaction);

        return indianStockTransaction;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public IndianStockTransaction delete(Integer indianstocktransactionId) {
        LOGGER.debug("Deleting IndianStockTransaction with id: {}", indianstocktransactionId);
        IndianStockTransaction deleted = this.wmGenericDao.findById(indianstocktransactionId);
        if (deleted == null) {
            LOGGER.debug("No IndianStockTransaction found with id: {}", indianstocktransactionId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), IndianStockTransaction.class.getSimpleName(), indianstocktransactionId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public void delete(IndianStockTransaction indianStockTransaction) {
        LOGGER.debug("Deleting IndianStockTransaction with {}", indianStockTransaction);
        this.wmGenericDao.delete(indianStockTransaction);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<IndianStockTransaction> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all IndianStockTransactions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<IndianStockTransaction> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all IndianStockTransactions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table IndianStockTransaction to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table IndianStockTransaction to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}