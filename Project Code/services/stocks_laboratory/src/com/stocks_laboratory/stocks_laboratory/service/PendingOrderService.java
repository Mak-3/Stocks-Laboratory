/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.PendingOrder;

/**
 * Service object for domain model class {@link PendingOrder}.
 */
public interface PendingOrderService {

    /**
     * Creates a new PendingOrder. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PendingOrder if any.
     *
     * @param pendingOrder Details of the PendingOrder to be created; value cannot be null.
     * @return The newly created PendingOrder.
     */
    PendingOrder create(@Valid PendingOrder pendingOrder);


	/**
     * Returns PendingOrder by given id if exists.
     *
     * @param pendingorderId The id of the PendingOrder to get; value cannot be null.
     * @return PendingOrder associated with the given pendingorderId.
	 * @throws EntityNotFoundException If no PendingOrder is found.
     */
    PendingOrder getById(Integer pendingorderId);

    /**
     * Find and return the PendingOrder by given id if exists, returns null otherwise.
     *
     * @param pendingorderId The id of the PendingOrder to get; value cannot be null.
     * @return PendingOrder associated with the given pendingorderId.
     */
    PendingOrder findById(Integer pendingorderId);

	/**
     * Find and return the list of PendingOrders by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param pendingorderIds The id's of the PendingOrder to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return PendingOrders associated with the given pendingorderIds.
     */
    List<PendingOrder> findByMultipleIds(List<Integer> pendingorderIds, boolean orderedReturn);


    /**
     * Updates the details of an existing PendingOrder. It replaces all fields of the existing PendingOrder with the given pendingOrder.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PendingOrder if any.
     *
     * @param pendingOrder The details of the PendingOrder to be updated; value cannot be null.
     * @return The updated PendingOrder.
     * @throws EntityNotFoundException if no PendingOrder is found with given input.
     */
    PendingOrder update(@Valid PendingOrder pendingOrder);


    /**
     * Partially updates the details of an existing PendingOrder. It updates only the
     * fields of the existing PendingOrder which are passed in the pendingOrderPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PendingOrder if any.
     *
     * @param pendingorderId The id of the PendingOrder to be deleted; value cannot be null.
     * @param pendingOrderPatch The partial data of PendingOrder which is supposed to be updated; value cannot be null.
     * @return The updated PendingOrder.
     * @throws EntityNotFoundException if no PendingOrder is found with given input.
     */
    PendingOrder partialUpdate(Integer pendingorderId, Map<String, Object> pendingOrderPatch);

    /**
     * Deletes an existing PendingOrder with the given id.
     *
     * @param pendingorderId The id of the PendingOrder to be deleted; value cannot be null.
     * @return The deleted PendingOrder.
     * @throws EntityNotFoundException if no PendingOrder found with the given id.
     */
    PendingOrder delete(Integer pendingorderId);

    /**
     * Deletes an existing PendingOrder with the given object.
     *
     * @param pendingOrder The instance of the PendingOrder to be deleted; value cannot be null.
     */
    void delete(PendingOrder pendingOrder);

    /**
     * Find all PendingOrders matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PendingOrders.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<PendingOrder> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all PendingOrders matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PendingOrders.
     *
     * @see Pageable
     * @see Page
     */
    Page<PendingOrder> findAll(String query, Pageable pageable);

    /**
     * Exports all PendingOrders matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all PendingOrders matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the PendingOrders in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the PendingOrder.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}