/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.PendingOrder;


/**
 * ServiceImpl object for domain model class PendingOrder.
 *
 * @see PendingOrder
 */
@Service("stocks_laboratory.PendingOrderService")
@Validated
@EntityService(entityClass = PendingOrder.class, serviceId = "stocks_laboratory")
public class PendingOrderServiceImpl implements PendingOrderService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PendingOrderServiceImpl.class);


    @Autowired
    @Qualifier("stocks_laboratory.PendingOrderDao")
    private WMGenericDao<PendingOrder, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<PendingOrder, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public PendingOrder create(PendingOrder pendingOrder) {
        LOGGER.debug("Creating a new PendingOrder with information: {}", pendingOrder);

        PendingOrder pendingOrderCreated = this.wmGenericDao.create(pendingOrder);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(pendingOrderCreated);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public PendingOrder getById(Integer pendingorderId) {
        LOGGER.debug("Finding PendingOrder by id: {}", pendingorderId);
        return this.wmGenericDao.findById(pendingorderId);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public PendingOrder findById(Integer pendingorderId) {
        LOGGER.debug("Finding PendingOrder by id: {}", pendingorderId);
        try {
            return this.wmGenericDao.findById(pendingorderId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No PendingOrder found with id: {}", pendingorderId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public List<PendingOrder> findByMultipleIds(List<Integer> pendingorderIds, boolean orderedReturn) {
        LOGGER.debug("Finding PendingOrders by ids: {}", pendingorderIds);

        return this.wmGenericDao.findByMultipleIds(pendingorderIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "stocks_laboratoryTransactionManager")
    @Override
    public PendingOrder update(PendingOrder pendingOrder) {
        LOGGER.debug("Updating PendingOrder with information: {}", pendingOrder);

        this.wmGenericDao.update(pendingOrder);
        this.wmGenericDao.refresh(pendingOrder);

        return pendingOrder;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public PendingOrder partialUpdate(Integer pendingorderId, Map<String, Object>pendingOrderPatch) {
        LOGGER.debug("Partially Updating the PendingOrder with id: {}", pendingorderId);

        PendingOrder pendingOrder = getById(pendingorderId);

        try {
            ObjectReader pendingOrderReader = this.objectMapper.reader().forType(PendingOrder.class).withValueToUpdate(pendingOrder);
            pendingOrder = pendingOrderReader.readValue(this.objectMapper.writeValueAsString(pendingOrderPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", pendingOrderPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        pendingOrder = update(pendingOrder);

        return pendingOrder;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public PendingOrder delete(Integer pendingorderId) {
        LOGGER.debug("Deleting PendingOrder with id: {}", pendingorderId);
        PendingOrder deleted = this.wmGenericDao.findById(pendingorderId);
        if (deleted == null) {
            LOGGER.debug("No PendingOrder found with id: {}", pendingorderId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), PendingOrder.class.getSimpleName(), pendingorderId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public void delete(PendingOrder pendingOrder) {
        LOGGER.debug("Deleting PendingOrder with {}", pendingOrder);
        this.wmGenericDao.delete(pendingOrder);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<PendingOrder> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PendingOrders");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<PendingOrder> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PendingOrders");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table PendingOrder to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table PendingOrder to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}