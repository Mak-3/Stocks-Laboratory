/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.StockWatchlist;

/**
 * Service object for domain model class {@link StockWatchlist}.
 */
public interface StockWatchlistService {

    /**
     * Creates a new StockWatchlist. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on StockWatchlist if any.
     *
     * @param stockWatchlist Details of the StockWatchlist to be created; value cannot be null.
     * @return The newly created StockWatchlist.
     */
    StockWatchlist create(@Valid StockWatchlist stockWatchlist);


	/**
     * Returns StockWatchlist by given id if exists.
     *
     * @param stockwatchlistId The id of the StockWatchlist to get; value cannot be null.
     * @return StockWatchlist associated with the given stockwatchlistId.
	 * @throws EntityNotFoundException If no StockWatchlist is found.
     */
    StockWatchlist getById(Integer stockwatchlistId);

    /**
     * Find and return the StockWatchlist by given id if exists, returns null otherwise.
     *
     * @param stockwatchlistId The id of the StockWatchlist to get; value cannot be null.
     * @return StockWatchlist associated with the given stockwatchlistId.
     */
    StockWatchlist findById(Integer stockwatchlistId);

	/**
     * Find and return the list of StockWatchlists by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param stockwatchlistIds The id's of the StockWatchlist to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return StockWatchlists associated with the given stockwatchlistIds.
     */
    List<StockWatchlist> findByMultipleIds(List<Integer> stockwatchlistIds, boolean orderedReturn);

    /**
     * Find and return the StockWatchlist for given symbol  andcreatedBy  if exists.
     *
     * @param symbol value of symbol; value cannot be null.
     * @param createdBy value of createdBy; value cannot be null.
     * @return StockWatchlist associated with the given inputs.
     * @throws EntityNotFoundException if no matching StockWatchlist found.
     */
    StockWatchlist getBySymbolAndCreatedBy(String symbol, Integer createdBy);

    /**
     * Updates the details of an existing StockWatchlist. It replaces all fields of the existing StockWatchlist with the given stockWatchlist.
     *
     * This method overrides the input field values using Server side or database managed properties defined on StockWatchlist if any.
     *
     * @param stockWatchlist The details of the StockWatchlist to be updated; value cannot be null.
     * @return The updated StockWatchlist.
     * @throws EntityNotFoundException if no StockWatchlist is found with given input.
     */
    StockWatchlist update(@Valid StockWatchlist stockWatchlist);


    /**
     * Partially updates the details of an existing StockWatchlist. It updates only the
     * fields of the existing StockWatchlist which are passed in the stockWatchlistPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on StockWatchlist if any.
     *
     * @param stockwatchlistId The id of the StockWatchlist to be deleted; value cannot be null.
     * @param stockWatchlistPatch The partial data of StockWatchlist which is supposed to be updated; value cannot be null.
     * @return The updated StockWatchlist.
     * @throws EntityNotFoundException if no StockWatchlist is found with given input.
     */
    StockWatchlist partialUpdate(Integer stockwatchlistId, Map<String, Object> stockWatchlistPatch);

    /**
     * Deletes an existing StockWatchlist with the given id.
     *
     * @param stockwatchlistId The id of the StockWatchlist to be deleted; value cannot be null.
     * @return The deleted StockWatchlist.
     * @throws EntityNotFoundException if no StockWatchlist found with the given id.
     */
    StockWatchlist delete(Integer stockwatchlistId);

    /**
     * Deletes an existing StockWatchlist with the given object.
     *
     * @param stockWatchlist The instance of the StockWatchlist to be deleted; value cannot be null.
     */
    void delete(StockWatchlist stockWatchlist);

    /**
     * Find all StockWatchlists matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching StockWatchlists.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<StockWatchlist> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all StockWatchlists matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching StockWatchlists.
     *
     * @see Pageable
     * @see Page
     */
    Page<StockWatchlist> findAll(String query, Pageable pageable);

    /**
     * Exports all StockWatchlists matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all StockWatchlists matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the StockWatchlists in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the StockWatchlist.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}