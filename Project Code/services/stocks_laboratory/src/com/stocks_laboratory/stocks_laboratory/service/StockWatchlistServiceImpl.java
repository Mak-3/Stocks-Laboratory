/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.StockWatchlist;


/**
 * ServiceImpl object for domain model class StockWatchlist.
 *
 * @see StockWatchlist
 */
@Service("stocks_laboratory.StockWatchlistService")
@Validated
@EntityService(entityClass = StockWatchlist.class, serviceId = "stocks_laboratory")
public class StockWatchlistServiceImpl implements StockWatchlistService {

    private static final Logger LOGGER = LoggerFactory.getLogger(StockWatchlistServiceImpl.class);


    @Autowired
    @Qualifier("stocks_laboratory.StockWatchlistDao")
    private WMGenericDao<StockWatchlist, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<StockWatchlist, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public StockWatchlist create(StockWatchlist stockWatchlist) {
        LOGGER.debug("Creating a new StockWatchlist with information: {}", stockWatchlist);

        StockWatchlist stockWatchlistCreated = this.wmGenericDao.create(stockWatchlist);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(stockWatchlistCreated);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public StockWatchlist getById(Integer stockwatchlistId) {
        LOGGER.debug("Finding StockWatchlist by id: {}", stockwatchlistId);
        return this.wmGenericDao.findById(stockwatchlistId);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public StockWatchlist findById(Integer stockwatchlistId) {
        LOGGER.debug("Finding StockWatchlist by id: {}", stockwatchlistId);
        try {
            return this.wmGenericDao.findById(stockwatchlistId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No StockWatchlist found with id: {}", stockwatchlistId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public List<StockWatchlist> findByMultipleIds(List<Integer> stockwatchlistIds, boolean orderedReturn) {
        LOGGER.debug("Finding StockWatchlists by ids: {}", stockwatchlistIds);

        return this.wmGenericDao.findByMultipleIds(stockwatchlistIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public StockWatchlist getBySymbolAndCreatedBy(String symbol, Integer createdBy) {
        Map<String, Object> symbolAndCreatedByMap = new HashMap<>();
        symbolAndCreatedByMap.put("symbol", symbol);
        symbolAndCreatedByMap.put("createdBy", createdBy);

        LOGGER.debug("Finding StockWatchlist by unique keys: {}", symbolAndCreatedByMap);
        return this.wmGenericDao.findByUniqueKey(symbolAndCreatedByMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "stocks_laboratoryTransactionManager")
    @Override
    public StockWatchlist update(StockWatchlist stockWatchlist) {
        LOGGER.debug("Updating StockWatchlist with information: {}", stockWatchlist);

        this.wmGenericDao.update(stockWatchlist);
        this.wmGenericDao.refresh(stockWatchlist);

        return stockWatchlist;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public StockWatchlist partialUpdate(Integer stockwatchlistId, Map<String, Object>stockWatchlistPatch) {
        LOGGER.debug("Partially Updating the StockWatchlist with id: {}", stockwatchlistId);

        StockWatchlist stockWatchlist = getById(stockwatchlistId);

        try {
            ObjectReader stockWatchlistReader = this.objectMapper.reader().forType(StockWatchlist.class).withValueToUpdate(stockWatchlist);
            stockWatchlist = stockWatchlistReader.readValue(this.objectMapper.writeValueAsString(stockWatchlistPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", stockWatchlistPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        stockWatchlist = update(stockWatchlist);

        return stockWatchlist;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public StockWatchlist delete(Integer stockwatchlistId) {
        LOGGER.debug("Deleting StockWatchlist with id: {}", stockwatchlistId);
        StockWatchlist deleted = this.wmGenericDao.findById(stockwatchlistId);
        if (deleted == null) {
            LOGGER.debug("No StockWatchlist found with id: {}", stockwatchlistId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), StockWatchlist.class.getSimpleName(), stockwatchlistId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public void delete(StockWatchlist stockWatchlist) {
        LOGGER.debug("Deleting StockWatchlist with {}", stockWatchlist);
        this.wmGenericDao.delete(stockWatchlist);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<StockWatchlist> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all StockWatchlists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<StockWatchlist> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all StockWatchlists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table StockWatchlist to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table StockWatchlist to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}