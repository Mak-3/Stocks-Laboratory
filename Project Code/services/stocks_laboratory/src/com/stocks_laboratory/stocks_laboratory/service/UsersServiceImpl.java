/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.stocks_laboratory.stocks_laboratory.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.stocks_laboratory.stocks_laboratory.AmericanStockPortfolio;
import com.stocks_laboratory.stocks_laboratory.AmericanStockTransaction;
import com.stocks_laboratory.stocks_laboratory.IndianStockPortfolio;
import com.stocks_laboratory.stocks_laboratory.IndianStockTransaction;
import com.stocks_laboratory.stocks_laboratory.PendingOrder;
import com.stocks_laboratory.stocks_laboratory.StockWatchlist;
import com.stocks_laboratory.stocks_laboratory.Users;


/**
 * ServiceImpl object for domain model class Users.
 *
 * @see Users
 */
@Service("stocks_laboratory.UsersService")
@Validated
@EntityService(entityClass = Users.class, serviceId = "stocks_laboratory")
public class UsersServiceImpl implements UsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("stocks_laboratory.IndianStockTransactionService")
    private IndianStockTransactionService indianStockTransactionService;

    @Lazy
    @Autowired
    @Qualifier("stocks_laboratory.PendingOrderService")
    private PendingOrderService pendingOrderService;

    @Lazy
    @Autowired
    @Qualifier("stocks_laboratory.AmericanStockPortfolioService")
    private AmericanStockPortfolioService americanStockPortfolioService;

    @Lazy
    @Autowired
    @Qualifier("stocks_laboratory.StockWatchlistService")
    private StockWatchlistService stockWatchlistService;

    @Lazy
    @Autowired
    @Qualifier("stocks_laboratory.AmericanStockTransactionService")
    private AmericanStockTransactionService americanStockTransactionService;

    @Lazy
    @Autowired
    @Qualifier("stocks_laboratory.IndianStockPortfolioService")
    private IndianStockPortfolioService indianStockPortfolioService;

    @Autowired
    @Qualifier("stocks_laboratory.UsersDao")
    private WMGenericDao<Users, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Users, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public Users create(Users users) {
        LOGGER.debug("Creating a new Users with information: {}", users);

        Users usersCreated = this.wmGenericDao.create(users);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(usersCreated);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Users getById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        return this.wmGenericDao.findById(usersId);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Users findById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        try {
            return this.wmGenericDao.findById(usersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Users found with id: {}", usersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public List<Users> findByMultipleIds(List<Integer> usersIds, boolean orderedReturn) {
        LOGGER.debug("Finding Users by ids: {}", usersIds);

        return this.wmGenericDao.findByMultipleIds(usersIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Users getByEmail(String email) {
        Map<String, Object> emailMap = new HashMap<>();
        emailMap.put("email", email);

        LOGGER.debug("Finding Users by unique keys: {}", emailMap);
        return this.wmGenericDao.findByUniqueKey(emailMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "stocks_laboratoryTransactionManager")
    @Override
    public Users update(Users users) {
        LOGGER.debug("Updating Users with information: {}", users);

        this.wmGenericDao.update(users);
        this.wmGenericDao.refresh(users);

        return users;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public Users partialUpdate(Integer usersId, Map<String, Object>usersPatch) {
        LOGGER.debug("Partially Updating the Users with id: {}", usersId);

        Users users = getById(usersId);

        try {
            ObjectReader usersReader = this.objectMapper.reader().forType(Users.class).withValueToUpdate(users);
            users = usersReader.readValue(this.objectMapper.writeValueAsString(usersPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", usersPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        users = update(users);

        return users;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public Users delete(Integer usersId) {
        LOGGER.debug("Deleting Users with id: {}", usersId);
        Users deleted = this.wmGenericDao.findById(usersId);
        if (deleted == null) {
            LOGGER.debug("No Users found with id: {}", usersId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Users.class.getSimpleName(), usersId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "stocks_laboratoryTransactionManager")
    @Override
    public void delete(Users users) {
        LOGGER.debug("Deleting Users with {}", users);
        this.wmGenericDao.delete(users);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Users> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Users> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table Users to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service stocks_laboratory for table Users to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<AmericanStockPortfolio> findAssociatedAmericanStockPortfolios(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated americanStockPortfolios");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return americanStockPortfolioService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<AmericanStockTransaction> findAssociatedAmericanStockTransactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated americanStockTransactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return americanStockTransactionService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<IndianStockPortfolio> findAssociatedIndianStockPortfolios(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated indianStockPortfolios");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return indianStockPortfolioService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<IndianStockTransaction> findAssociatedIndianStockTransactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated indianStockTransactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return indianStockTransactionService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<PendingOrder> findAssociatedPendingOrders(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated pendingOrders");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return pendingOrderService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "stocks_laboratoryTransactionManager")
    @Override
    public Page<StockWatchlist> findAssociatedStockWatchlists(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated stockWatchlists");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.id = '" + id + "'");

        return stockWatchlistService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service IndianStockTransactionService instance
     */
    protected void setIndianStockTransactionService(IndianStockTransactionService service) {
        this.indianStockTransactionService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service PendingOrderService instance
     */
    protected void setPendingOrderService(PendingOrderService service) {
        this.pendingOrderService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AmericanStockPortfolioService instance
     */
    protected void setAmericanStockPortfolioService(AmericanStockPortfolioService service) {
        this.americanStockPortfolioService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service StockWatchlistService instance
     */
    protected void setStockWatchlistService(StockWatchlistService service) {
        this.stockWatchlistService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AmericanStockTransactionService instance
     */
    protected void setAmericanStockTransactionService(AmericanStockTransactionService service) {
        this.americanStockTransactionService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service IndianStockPortfolioService instance
     */
    protected void setIndianStockPortfolioService(IndianStockPortfolioService service) {
        this.indianStockPortfolioService = service;
    }

}